// Generated by CoffeeScript 1.6.3
/*
This class should hold all of the enemy classes and related classes
*/


(function() {
  var $, Enemy, EnemyFollower, EnemyRunsAwayAndShoots, canvas, circle, context, dist, draw, gameObjects, mouseX, mouseY, paused, playerX, playerY, rgb, rgba,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Enemy = (function() {
    function Enemy() {}

    Enemy.prototype.draw = function() {};

    Enemy.prototype.run = function() {
      var triedSpeed;
      triedSpeed = dist(this.velX, this.velY);
      if (triedSpeed > this.maxSpeed) {
        this.velX *= this.maxSpeed / triedSpeed;
        this.velY *= this.maxSpeed / triedSpeed;
      }
      this.x += this.velX;
      return this.y += this.velY;
    };

    return Enemy;

  })();

  EnemyFollower = (function(_super) {
    __extends(EnemyFollower, _super);

    function EnemyFollower(x, y) {
      this.x = x;
      this.y = y;
      this.maxSpeed = .2;
    }

    EnemyFollower.prototype.draw = function() {
      context.fillStyle = rgb(255, 0, 0);
      return circle(this.x, this.y, 5);
    };

    EnemyFollower.prototype.run = function() {
      this.velX = playerX - this.x;
      this.velY = playerY - this.y;
      return EnemyFollower.__super__.run.apply(this, arguments);
    };

    return EnemyFollower;

  })(Enemy);

  EnemyRunsAwayAndShoots = (function(_super) {
    var Bullet;

    __extends(EnemyRunsAwayAndShoots, _super);

    function EnemyRunsAwayAndShoots(x, y) {
      this.x = x;
      this.y = y;
      this.maxSpeed = .1;
      this.deadline = 100;
      this.shootCounter = 0;
      this.velX = 0;
      this.velY = 0;
    }

    EnemyRunsAwayAndShoots.prototype.draw = function() {
      context.fillStyle = rgb(255, 255, 0);
      return circle(this.x, this.y, 20);
    };

    EnemyRunsAwayAndShoots.prototype.run = function() {
      this.velX = this.x - playerX;
      this.velY = this.y - playerY;
      this.shootCounter++;
      if (this.shootCounter === this.deadline) {
        gameObjects.push(new Bullet(this.x, this.y, (playerX - this.x) * .001, (playerY - this.y) * .001));
        this.shootCounter = 0;
      }
      return EnemyRunsAwayAndShoots.__super__.run.apply(this, arguments);
    };

    Bullet = (function(_super1) {
      __extends(Bullet, _super1);

      function Bullet(x, y, velX, velY) {
        this.x = x;
        this.y = y;
        this.velX = velX;
        this.velY = velY;
      }

      Bullet.prototype.draw = function() {
        context.fillStyle = rgb(0, 0, 0);
        return circle(this.x, this.y, 3);
      };

      return Bullet;

    })(Enemy);

    return EnemyRunsAwayAndShoots;

  })(Enemy);

  circle = function(centerX, centerY, radius) {
    context.beginPath();
    context.arc(centerX, centerY, radius, 0, 2 * Math.PI, true);
    return context.fill();
  };

  draw = function() {
    var object, _i, _j, _len, _len1;
    context.fillStyle = rgb(127, 127, 127);
    context.fillRect(0, 0, 1000, 1000);
    context.fillStyle = rgb(0, 200, 0);
    circle(playerX, playerY, 10);
    for (_i = 0, _len = gameObjects.length; _i < _len; _i++) {
      object = gameObjects[_i];
      object.draw();
    }
    if (!paused) {
      playerX += (mouseX - playerX) * .1;
      playerY += (mouseY - playerY) * .1;
      for (_j = 0, _len1 = gameObjects.length; _j < _len1; _j++) {
        object = gameObjects[_j];
        object.run();
      }
    }
    return setTimeout(draw, 1);
  };

  /* --------------------------------------------
       Begin helperFunctions.coffee
  --------------------------------------------
  */


  dist = function(x, y) {
    return Math.sqrt(x * x + y * y);
  };

  /* --------------------------------------------
       Begin tailGame.coffee
  --------------------------------------------
  */


  $ = jQuery;

  rgb = function(r, g, b) {
    return "rgb(" + r + ", " + g + ", " + b + ")";
  };

  rgba = function(r, g, b, a) {
    return "rgb(" + r + ", " + g + ", " + b + ", " + a + ")";
  };

  canvas = document.getElementById("myCanvas");

  console.log(canvas);

  context = canvas.getContext("2d");

  console.log(context);

  mouseX = 0;

  mouseY = 0;

  playerX = 0;

  playerY = 0;

  gameObjects = [new EnemyFollower(10, 10), new EnemyFollower(20, 20), new EnemyRunsAwayAndShoots(100, 100)];

  paused = false;

  draw();

  console.log(rgb(0, 0, 0));

  $(function() {
    var newWidth;
    newWidth = Math.min(($("#myCanvas")).width(), ($("#myCanvas")).height());
    ($("#myCanvas")).width(newWidth);
    ($("#myCanvas")).height(newWidth);
    ($("#myCanvas")).css("width", newWidth);
    ($("#myCanvas")).css("height", newWidth);
    ($("#myCanvas")).click(function() {
      console.log("LOL");
      return console.log("");
    });
    ($("body")).mousemove(function(event) {
      mouseX = event.pageX;
      return mouseY = event.pageY;
    });
    return ($("#pauseButton")).click(function() {
      return paused = !paused;
    });
  });

}).call(this);
